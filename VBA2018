Function RemoveNumbers(Txt As String) As String
' Removes employee IDs of the form 000000;
With CreateObject("VBScript.RegExp")
.Global = True
.Pattern = "[0-9]{6}[;]"
RemoveNumbers = .Replace(Txt, "")
End With
End Function



Function furthestRow(sourceRange As Range) As Long

furthestRow = sourceRange.Find(What:="*", _
                    After:=Cells(1, sourceRange.Column), _
                    LookAt:=xlPart, _
                    LookIn:=xlFormulas, _
                    SearchOrder:=xlByRows, _
                    SearchDirection:=xlPrevious, _
                    MatchCase:=False).Row

End Function

Function earliestRow(sourceRange As Range) As Long

earliestRow = sourceRange.Find(What:="*", _
                    After:=Cells(furthestRow(sourceRange), sourceRange.Column), _
                    LookAt:=xlPart, _
                    LookIn:=xlFormulas, _
                    SearchOrder:=xlByRows, _
                    SearchDirection:=xlNext, _
                    MatchCase:=False).Row

End Function

Function loadArray(sourceRange As Range) As Variant

' works for a single column only (1d array)

Dim i, j, sourceLookRow, sourceEndRow, sourceLength As Long
Dim outputArray As Variant

i = 0
sourceLookRow = earliestRow(sourceRange)
sourceEndRow = furthestRow(sourceRange)
sourceLength = sourceEndRow - sourceLookRow

' Extract and Load

For i = 0 To sourceLength
  outputArray(i) = sourceRange.Cells(sourceLookRow, 1).Value
  sourceLookRow = sourceLookRow + 1
Next

loadArray = outputArray

End Function

Function ConcatenateRange(sourceRange As Range, _
                    Optional ByVal seperator As String) As String

Dim lookCell As Range
Dim outputString As String
Dim outputArray As Variant
Dim i, j As Long

' Load Range to Array

outputArray = sourceRange.Value

' Extract and Load

For i = 1 To UBound(outputArray, 1)
    For j = 1 To UBound(outputArray, 2)
        If Len(outputArray(i, j)) <> 0 Then
            outputString = outputString & (seperator & outputArray(i, j))
        End If
    Next
Next

'Trim leading separator

    If Len(outputString) <> 0 Then
        outputString = Right$(outputString, (Len(outputString) - Len(seperator)))
    End If

ConcatenateRange = outputString

End Function

Function partialMatch(targetCell As Range, armsRange As Range) As Boolean

Dim i, armsLookRow, armsEndRow, armsLength As Long
Dim target As String
Dim hit As Boolean

armsLength = furthestRow(armsRange) - earliestRow(armsRange)
armsLookRow = earliestRow(armsRange)
target = ConcatenateRange(targetCell)
hit = False

For i = 0 To armsLength
  If InStr(target, CStr(armsRange.Cells(armsLookRow, 1).Value)) > 0 Then
    armsLookRow = armsLookRow + 1
    hit = True
  End If
Next

partialMatch = hit

End Function

' TARGET LIST
' 101604, abracadabra, excelcior
' jimmy crocket, 111821, lasuverie
' dangerous liasions
' albequerque
' mississippi
' chewy donuts, 101604
' alfalfa

' ARMS LIST
' abracadabra
' 101604
' sippi
' nuts

