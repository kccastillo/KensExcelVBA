Function regExtract(targetString As String, searchString As String) As String

' Returns first RegEx match of searchString from targetString

' smtp:\w+(\W\w+)?(\W\w+)?(\W\w+)?@brisbane.qld.gov.au
' sip:\w+(\W\w+)?(\W\w+)?(\W\w+)?@brisbane.qld.gov.au

'=IFERROR(SUBSTITUTE(regExtract([@[smtp proxy]],"smtp:\w+(\W\w+)?(\W\w+)?(\W\w+)?@brisbane.qld.gov.au"),"smtp:",""),"")
'=IFERROR(SUBSTITUTE(regExtract([@[smtp proxy]],"sip:\w+(\W\w+)?(\W\w+)?(\W\w+)?@brisbane.qld.gov.au"),"sip:",""),"")

With CreateObject("VBScript.RegExp")
    .Global = True
    .Ignorecase = False
    .Pattern = searchString
    regExtract = .Execute(targetString)(0)
    End With

End Function

Function stripByRegEx(targetString As String, searchString As String) As String

' Removes recurrent text in the RegEx form of the searchString from the targetString;

With CreateObject("VBScript.RegExp")
    .Global = True
    .Pattern = searchString ' for employee ID, "[0-9]{6}[;]"
    stripByRegEx = .Replace(Txt, "")
    End With

End Function

Function columnsSelected(sourceRange As Range) As Long

Dim sourceArray As Variant
Dim maxColumns As Long

columnsSelected = sourceRange.Columns.CountLarge

'maxColumns = 16384 ' as per https://support.office.com/en-us/article/excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3

End Function

Function rowsSelected(sourceRange As Range) As Long

Dim sourceArray As Variant
Dim maxRows As Long

rowsSelected = sourceRange.Rows.CountLarge

'maxRows = 1048576 ' as per https://support.office.com/en-us/article/excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3

End Function

Function furthestRow(sourceRange As Range) As Long

Dim i, rowCount As Long

rowCount = 0

If rowsSelected(sourceRange) = 1048576 Then

    rowCount = sourceRange.Find(What:="*", _
               After:=Cells(1, sourceRange.Column), _
               LookAt:=xlPart, _
               LookIn:=xlFormulas, _
               SearchOrder:=xlByRows, _
               SearchDirection:=xlPrevious, _
               MatchCase:=False).Row

    Else
    
    For i = 1 To rowsSelected(sourceRange)
        If sourceRange.Cells(i, 1).Value <> "" Then
            rowCount = rowCount + 1
        End If
    Next
    
    End If
    
furthestRow = rowCount

End Function

Function earliestRow(sourceRange As Range) As Long

Dim i, rowCount As Long

If rowsSelected(sourceRange) = 1048576 Then

    rowCount = sourceRange.Find(What:="*", _
               After:=Cells(furthestRow(sourceRange), sourceRange.Column), _
               LookAt:=xlPart, _
               LookIn:=xlFormulas, _
               SearchOrder:=xlByRows, _
               SearchDirection:=xlNext, _
               MatchCase:=False).Row
               
    Else
    
    rowCount = rowsSelected(sourceRange)
    
    For i = rowsSelected(sourceRange) To 1
        If sourceRange.Cells(i, 1).Value <> "" Then
            rowCount = rowCount - 1
        End If
    Next
    
    End If
    
earliestRow = rowCount

End Function

Function loadArray(sourceRange As Range) As Variant

' works for a single column only (1d array)

Dim i, j, sourceLookRow, sourceEndRow, sourceLength As Long
Dim outputArray As Variant

i = 0
sourceLookRow = earliestRow(sourceRange)
sourceEndRow = furthestRow(sourceRange)
sourceLength = sourceEndRow - sourceLookRow

' Extract and Load

For i = 0 To sourceLength
  outputArray(i) = sourceRange.Cells(sourceLookRow, 1).Value
  sourceLookRow = sourceLookRow + 1
Next

loadArray = outputArray

End Function

Function ConcatenateRange(sourceRange As Range, _
                    Optional seperator As String) As String

Dim lookCell As Range
Dim outputString As String
Dim outputArray As Variant
Dim i, j As Long

' Load Range to Array

outputArray = sourceRange.Value

' Extract and Load

For i = 1 To UBound(outputArray, 1)
    For j = 1 To UBound(outputArray, 2)
        If Len(outputArray(i, j)) <> 0 Then
            outputString = outputString & (seperator & outputArray(i, j))
        End If
    Next
Next

'Trim leading separator

    If Len(outputString) <> 0 Then
        outputString = Right$(outputString, (Len(outputString) - Len(seperator)))
    End If

ConcatenateRange = outputString

End Function

Function inStringMatch(targetCell As Range, armsCell As Range) As Long

inStringMatch = InStr(targetCell, armsCell)

End Function

Function partialMatch(targetCell As Range, armsRange As Range) As Boolean

'OVERVIEW
'partialMatch will return true if any strings in cells within armsRange can be found in the targetCell string.

'LIMITATIONS
'targetCell must be a single cell
'armsRange must occupy an entire column, no header (dependency: earliestRow and furthestRow)

'TESTED AGAINST
'armsRange can contain empty cells between entries

Dim i, check, armsLookRow, armsLength As Long
Dim target As String
Dim hit As Boolean

armsLookRow = earliestRow(armsRange)
armsLength = furthestRow(armsRange) - earliestRow(armsRange)
target = targetCell.Value

hit = False

For i = 0 To armsLength

    If CStr(armsRange.Cells(armsLookRow, 1).Value) = "" Then
            check = 0
        Else
            check = InStr(target, CStr(armsRange.Cells(armsLookRow, 1).Value))
        End If
    
    If check > 0 Then
            hit = True
        End If
    
    armsLookRow = armsLookRow + 1
    
Next

partialMatch = hit

End Function


